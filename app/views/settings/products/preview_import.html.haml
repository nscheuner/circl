#secondary_navbar.navbar.navbar-default.navbar-static-top

  .container
    #secondary_navigation.collapse.navbar-collapse
      .navbar-brand
        = I18n.t("product.views.import_products")

.container
  .row
    .col-lg-12
      - if @products.is_a? String
        .alert.alert-danger
          = link_to settings_path(anchor: 'affairs'), class: 'btn btn-primary' do
            .icon.icon-chevron-left
            = I18n.t("common.previous")
          = @products

      - else
        = form_tag(import_settings_products_path, method: :post, id: 'settings_products_import') do
          .panel.panel-default
            .panel-heading
              .panel-title
                = I18n.t('product.views.products_found_in_file')

            .panel-body

              %table.datatable
                %thead
                  %tr
                    %th= I18n.t("common.line")
                    %th= I18n.t("common.key")
                    %th= I18n.t("common.title")
                    %th= I18n.t("common.description")
                    %th.number= I18n.t("common.width")
                    %th.number= I18n.t("common.height")
                    %th.number= I18n.t("common.depth")
                    %th.number= I18n.t("common.volume")
                    %th.number= I18n.t("common.weight")
                    %th= I18n.t("product.views.unit_symbol")
                    %th= I18n.t("product.views.price_to_unit_rate")

                    %th.number= I18n.t("product.views.buying_prices")
                    %th.number= I18n.t("product.views.selling_prices")
                    %th.number= I18n.t("product.views.art_values")
                    %th.number= I18n.t("product.views.program_groups")

                    %th= I18n.t("product.views.provider_id")
                    %th= I18n.t("product.views.after_sale_id")
                    %th= I18n.t("common.category")
                    %th= I18n.t("product.views.has_accessories")
                    %th= I18n.t("common.archive")
                    %th= I18n.t("common.import")

                %tbody
                  - @products.each_with_index do |p, i|
                    - line = i + 1
                    - error_msg = []
                    - p.errors.messages.each do |k,a|
                      - error_msg << "#{k}: " + a.join(", ")

                    - p.notices.messages.each do |k,a|
                      - error_msg << a.join(", ")

                    - classes = []
                    - if p.errors.empty?
                      - if p.notices.empty?
                        - classes << 'success'
                      - else
                        - classes << 'warning'
                    - else
                      - classes << 'danger'

                    %tr{class: classes.join(" "),
                      'data-trigger' => 'click',
                      'data-title' => (p.errors.size.to_s + " " + I18n.t("common.errors.error") + "(s)"),
                      'data-html' => true,
                      'data-line' => line,
                      'data-placement' => 'auto right',
                      'data-content' => raw(error_msg.join(" | "))}

                      %td= line
                      %td= p.key
                      %td= p.title
                      %td= p.description.try(:exerpt)
                      %td.number= p.width
                      %td.number= p.height
                      %td.number= p.depth
                      %td.number= p.volume
                      %td.number= p.weight
                      %td= p.unit_symbol
                      %td= p.price_to_unit_rate

                      - # count won't work for preview as record is not saved
                      - if p.variants.size > 0
                        %td.number
                          != p.variants.map{|v| v.buying_price.try(:to_view)}.join("<br />")
                        %td.number
                          != p.variants.map{|v| v.selling_price.try(:to_view)}.join("<br />")
                        %td.number
                          != p.variants.map{|v| v.art.try(:to_view)}.join("<br />")
                        %td.number
                          != p.variants.map{|v| v.program_group}.sort.join("<br />")
                      - else
                        %td.number
                        %td.number
                        %td.number
                        %td.number

                      %td= p.provider.try(:name)
                      %td= p.after_sale.try(:name)
                      %td= p.category
                      %td
                        = I18n.t("common.#{p.has_accessories}") unless p.has_accessories.nil?
                      %td
                        = I18n.t("common.#{p.archive}") unless p.archive.nil?
                      %td= check_box_tag "unreal[]", i, p.errors.count == 0

              %h3= I18n.t("product.views.ignore_theses_columns")
              .row
                .col-md-6
                  %h4= I18n.t("product.views.product_attributes")
                  %table.table.table-hover
                    .thead
                      %tr
                        %td= t("product.views.attribute")
                        %td
                    .tbody
                      %tr
                        %td
                          key
                        %td
                          = check_box_tag "skip_columns[]", 'key', false, disabled: true
                      - @columns.each do |c|
                        - next if c == :key # Mandatory
                        - next if c.to_s.match(/\d+$/) # Skip prices
                        %tr
                          %td
                            = c
                          %td
                            = check_box_tag "skip_columns[]", c

                .col-md-6
                  %h4= I18n.t("product.views.price_definitions")
                  %table.table.table-hover
                    .thead
                      %tr
                        %td
                        %td
                          %label
                            %input.select_all{type: 'checkbox', name: 'program_group'}
                            = t("product.views.program_group")
                        %td
                          %label
                            %input.select_all{type: 'checkbox', name: 'buying_price'}
                            = t("product.views.buying_price")
                        %td
                          %label
                            %input.select_all{type: 'checkbox', name: 'selling_price'}
                            = t("product.views.selling_price")
                        %td
                          %label
                            %input.select_all{type: 'checkbox', name: 'art'}
                            = t("product.views.art")
                    .tbody
                      - (1..16).each do |row|
                        %tr
                          %td
                            = row
                          - %w(program_group buying_price selling_price art).each do |col|
                            %td{class: col}
                              = check_box_tag "skip_columns[]", [col, row].join("_")

            .panel-footer
              .text-right
                = submit_tag I18n.t('product.views.proceed_with_import'), class: 'btn btn-primary'
